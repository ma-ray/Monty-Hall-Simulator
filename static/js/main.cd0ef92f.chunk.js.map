{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Door","props","Button","variant","onClick","size","style","fontSize","value","App","state","doors","opened","Array","fill","stage","status","this","generateGame","Math","floor","random","setState","className","renderDoor","margin","href","i","slice","j","handleClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAKA,SAASA,EAAKC,GACV,OACI,cAACC,EAAA,EAAD,CACAC,QAAQ,QACRC,QAASH,EAAMG,QACfC,KAAK,KAAKC,MAAO,CAACC,SAAU,KAH5B,SAIEN,EAAMO,Q,IA2GDC,E,kDAtGX,WAAYR,GAAQ,IAAD,8BACf,cAAMA,IAEDS,MAAQ,CACTC,MAAO,KACPC,OAAQC,MAAM,GAAGC,KAAK,gBACtBC,MAAO,EACPC,OAAQ,oCAPG,E,gEAYfC,KAAKC,iB,qCAIL,IAAIP,EAAQE,MAAM,GAAGC,KAAK,gBAG1BH,EAFYQ,KAAKC,MAAsB,EAAhBD,KAAKE,WAEb,eAEfJ,KAAKK,SAAS,CACVX,MAAOA,EACPC,OAAQC,MAAM,GAAGC,KAAK,gBACtBC,MAAO,EACPC,OAAQ,6B,+BAIR,IACJA,EADG,OAIP,OAFAA,EAASC,KAAKP,MAAMM,OAGhB,sBAAKO,UAAU,MAAf,UACI,oBAAIjB,MAAO,CAACC,SAAU,IAAtB,kCACA,sBAAKgB,UAAU,QAAf,UACKN,KAAKO,WAAW,GAChBP,KAAKO,WAAW,GAChBP,KAAKO,WAAW,MAGrB,qBAAKD,UAAU,SAAf,SACI,mBAAGjB,MAAO,CAACC,SAAU,IAArB,SAA2BS,MAG/B,qBAAKO,UAAU,YAAf,SACI,cAACrB,EAAA,EAAD,CACAE,QAAS,kBAAM,EAAKc,gBACpBZ,MAAO,CAACmB,OAAQ,IAFhB,0CAOJ,8BACI,6EAA+C,mBAAGC,KAAK,mDAAR,mC,kCAMjDC,GACV,IAAIZ,EAAQE,KAAKP,MAAMK,MACnBJ,EAAQM,KAAKP,MAAMC,MACnBC,EAASK,KAAKP,MAAME,OAAOgB,QAC3BZ,EAASC,KAAKP,MAAMM,OAExB,OAAQD,GACJ,KAAK,EACD,IAAK,IAAIc,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAIF,IAAME,GAAkB,iBAAblB,EAAMkB,GAAa,CAC9BjB,EAAOiB,GAAKlB,EAAMkB,GAClB,MAGRb,EAAS,iDACT,MACJ,KAAK,EACDJ,EAAOe,GAAKhB,EAAMgB,GAClBX,EAAsB,iBAAbL,EAAMgB,GAAc,kCAAgB,wBAC7C,MACJ,QACI,OAGRV,KAAKK,SAAS,CACVP,MAAOE,KAAKP,MAAMK,MAAQ,EAC1BH,OAAQA,EACRI,OAAQA,M,iCAIHW,GAAI,IAAD,OACZ,OACI,cAAC3B,EAAD,CACAQ,MAAOS,KAAKP,MAAME,OAAOe,GACzBvB,QAAS,kBAAM,EAAK0B,YAAYH,U,GAjGtBI,IAAMC,WCHTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cd0ef92f.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nfunction Door(props) {\r\n    return (\r\n        <Button \r\n        variant=\"light\" \r\n        onClick={props.onClick} \r\n        size=\"lg\" style={{fontSize: 200}}\r\n        >{props.value}</Button>\r\n    )\r\n}\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            doors: null,\r\n            opened: Array(3).fill(\"ðŸšª\"),\r\n            stage: 0,\r\n            status: \"Press the start button to begin.\",\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.generateGame();\r\n    }\r\n\r\n    generateGame() {\r\n        let doors = Array(3).fill(\"ðŸ’©\");\r\n        let prize = Math.floor(Math.random() * 3);\r\n\r\n        doors[prize] = \"ðŸ’°\";\r\n\r\n        this.setState({\r\n            doors: doors,\r\n            opened: Array(3).fill(\"ðŸšª\"),\r\n            stage: 1,\r\n            status: \"Pick a door! Any door.\",\r\n        })\r\n    }\r\n\r\n  render() {\r\n    let status;\r\n    status = this.state.status;\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1 style={{fontSize: 75}}>Monty Hall Simulator</h1>\r\n            <div className=\"doors\">\r\n                {this.renderDoor(0)}\r\n                {this.renderDoor(1)}\r\n                {this.renderDoor(2)}\r\n            </div>\r\n\r\n            <div className=\"status\">\r\n                <p style={{fontSize: 25}}>{status}</p>\r\n            </div>\r\n\r\n            <div className=\"resetGame\">\r\n                <Button  \r\n                onClick={() => this.generateGame()}\r\n                style={{margin: 25}}>\r\n                Start/Reset the simulation\r\n                </Button>\r\n            </div>\r\n\r\n            <div>\r\n                <p>To learn more about the Monty Hall problem, <a href=\"https://en.wikipedia.org/wiki/Monty_Hall_problem\">click here.</a></p>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n  handleClick(i) {\r\n    let stage = this.state.stage;\r\n    let doors = this.state.doors;\r\n    let opened = this.state.opened.slice();\r\n    let status = this.state.status;\r\n\r\n    switch (stage) {\r\n        case 1:\r\n            for (let j = 0; j < 3; j++) {\r\n                if (i !== j && doors[j] !== \"ðŸ’°\") {\r\n                    opened[j] = doors[j];\r\n                    break;\r\n                }\r\n            }\r\n            status = \"Choose carefully. Switch or stay? ðŸ¤”\";\r\n            break;\r\n        case 2:\r\n            opened[i] = doors[i];\r\n            status = doors[i] === \"ðŸ’°\" ? \"ðŸŽ‰You WinðŸŽ‰\" : \"You Lose ðŸ˜”\";\r\n            break;\r\n        default:\r\n            return;\r\n    }\r\n\r\n    this.setState({\r\n        stage: this.state.stage + 1,\r\n        opened: opened,\r\n        status: status,\r\n    })\r\n  }\r\n\r\n  renderDoor(i) {\r\n    return (\r\n        <Door \r\n        value={this.state.opened[i]}\r\n        onClick={() => this.handleClick(i)}\r\n        />\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}